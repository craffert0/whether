#! /opt/homebrew/bin/python3

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2025 Colin Rafferty <colin@rafferty.net>

# There must be a ~/.whetherrc file like this:
#
#   {
#     "auth": "eyJhb...",
#     "lat": 40.674942,
#     "long": -73.969016
#     "country": "US"
#   }
#
# The "country" entry is optional, and defaults to US. The "auth" entry is an
# authentication token generated from Apple. Here are two blogposts about how
# to generate it:
#
# https://dev.iachieved.it/iachievedit/weatherkit-rest-api/
# https://mrhemanth.medium.com/how-to-use-apples-weatherkit-to-fetch-weather-data-8c4c27826f7d

import datetime
import math
import json
import os.path
import re

from http.client import *
from pathlib import Path


def get_location():
    rc = json.loads(Path(os.path.expanduser("~/.ipinforc")).read_text())
    conn = HTTPSConnection("ipinfo.io")
    req = conn.request(
        "GET", "/", headers={"Authorization": f'Bearer {rc["token"]}'}
    )
    response = conn.getresponse()
    if response.status != 200:
        raise RuntimeError(f"{response.status}: {response.reason}")
    return json.loads(response.read())


class Server:
    def __init__(self, location):
        rc = json.loads(Path(os.path.expanduser("~/.whetherrc")).read_text())
        self.headers = {"Authorization": f'Bearer {rc["auth"]}'}
        self.latlong = location["loc"].replace(",", "/")
        self.country = location["country"]
        self.conn = HTTPSConnection("weatherkit.apple.com")

    def get(self, path, params=""):
        fullpath = "/api/v1/" + path + "/" + self.latlong
        fullparams = self.country + params
        req = self.conn.request(
            "GET", f"{fullpath}?{fullparams}", headers=self.headers
        )
        response = self.conn.getresponse()
        if response.status != 200:
            raise RuntimeError(f"{response.status}: {response.reason}")
        return json.loads(response.read())

    def weather(self, dataSets):
        return self.get("weather/en_US", f'&dataSets={",".join(dataSets)}')


def bulb(T, RH):
    # https://www.omnicalculator.com/physics/wet-bulb#how-to-calculate-the-wet-bulb-temperature
    # https://journals.ametsoc.org/view/journals/apme/50/11/jamc-d-11-0143.1.xml
    return (
        T * math.atan(0.151977 * math.sqrt(RH + 8.313659))
        + 0.00391838 * (RH ** (3 / 2)) * math.atan(0.023101 * RH)
        - math.atan(RH - 1.676331)
        + math.atan(T + RH)
        - 4.686035
    )


def cToF(celsius):
    return int(32 + celsius * 1.8)


def uncamel(s):
    return " ".join(
        [
            x.lower()
            for x in re.findall(r"[A-Z](?:[a-z]+|[A-Z]*(?=[A-Z]|$))", s)
        ]
    )


conditions = {
    "Clear": "􀆭",
    "MostlyClear": "􀆫",
    "PartlyCloudy": "⛅",
    "MostlyCloudy": "􀇂",
    "Cloudy": "􀇂",
    "Hazy": "􀆷",
    "ScatteredThunderstorms": "􀇘",
    "Thunderstorms": "⛈️",
    "Drizzle": "􀇄",
    "Rain": "􀇆",
    "HeavyRain": "􀇈",
}


def currentWeather(js):
    conditionCode = js["conditionCode"]
    condition = conditions.get(conditionCode, "")
    condition_code = uncamel(conditionCode)
    tC = js["temperature"]
    tF = cToF(tC)
    aF = cToF(js["temperatureApparent"])
    dF = cToF(js["temperatureDewPoint"])
    RH = 100 * js["humidity"]
    bF = cToF(bulb(tC, RH))
    print(f"now: {condition} {tF}° ({aF}°, {dF}°, {bF}°) {condition_code}")


def shortCondition(s):
    chance = s["precipitationChance"]
    if chance == 0:
        return s["condition"]
    return f'{int(100 * chance)}% chance {s["condition"]}'


def getTime(s, n):
    str = s.get(n)
    return None if str == None else datetime.datetime.fromisoformat(str)


def deltaMinutes(x, y):
    return int((x - y) / datetime.timedelta(minutes=1))


def shortTag(now, i, s):
    endTime = getTime(s, "endTime")
    if endTime != None:
        if i == 0:
            return f"next {deltaMinutes(endTime, now)} minutes"
        else:
            return f'following {deltaMinutes(endTime, getTime(s, "startTime"))} minutes'
    elif i == 0:
        return "next hour"
    else:
        return f'remaining {60 - deltaMinutes(getTime(s, "startTime"), now)} minutes'


def forecastNextHour(js):
    now = datetime.datetime.now(datetime.timezone.utc)
    for i, s in enumerate(js["summary"]):
        print(f"{shortTag(now, i, s)}: {shortCondition(s)}")


def daily(when, r):
    conditionCode = r["conditionCode"]
    condition = conditions.get(conditionCode, "")
    print(
        f'{when}: {condition} {cToF(r["temperatureMax"])}°/{cToF(r["temperatureMin"])}°  {uncamel(conditionCode)}'
    )


def forecastDaily(js):
    days = js["days"]
    if datetime.datetime.now().hour < 18:
        daily("today", days[0]["restOfDayForecast"])
    else:
        daily("tonight", days[0]["overnightForecast"])
        daily("tomorrow", days[1]["daytimeForecast"])


severities = {
    "minor": "😐",
    "moderate": "😟",
    "severe": "😧",
    "extreme": "😬",
}


def weatherAlerts(js):
    now = datetime.datetime.now(datetime.timezone.utc)
    for a in js["alerts"]:
        severity = severities.get(a["severity"], "??")
        minutes = deltaMinutes(getTime(a, "expireTime"), now)
        if minutes < 60:
            s = "" if minutes == 1 else "s"
            print(f"{severity} for {minutes} minute{s}")
        else:
            hours = int(minutes / 60)
            s = "" if hours == 1 else "s"
            print(f"{severity} alert for {hours} hour{s}")


def dumpAll(server):
    print(json.dumps(server.weather(server.get("availability")), indent=2))


def main():
    location = get_location()
    server = Server(location)
    results = server.weather(
        [
            "currentWeather",
            "forecastNextHour",
            "forecastDaily",
            "weatherAlerts",
        ]
    )
    currentWeather(results.get("currentWeather"))
    forecastNextHour(results.get("forecastNextHour", {"summary": []}))
    forecastDaily(results.get("forecastDaily"))
    weatherAlerts(results.get("weatherAlerts", {"alerts": []}))


if __name__ == "__main__":
    main()
